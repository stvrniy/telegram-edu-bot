{"dependencies": [{"name": "aiogram", "version": "3.22.0", "vulns": []}, {"name": "aiohttp", "version": "3.12.14", "vulns": []}, {"name": "aiofiles", "version": "23.2.1", "vulns": []}, {"name": "pydantic", "version": "2.11.10", "vulns": []}, {"name": "typing-extensions", "version": "4.15.0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.0", "vulns": []}, {"name": "apscheduler", "version": "3.10.1", "vulns": []}, {"name": "fastapi", "version": "0.115.5", "vulns": []}, {"name": "starlette", "version": "0.41.3", "vulns": [{"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "uvicorn", "version": "0.32.0", "vulns": []}, {"name": "pydantic-core", "version": "2.33.2", "vulns": []}, {"name": "anyio", "version": "4.11.0", "vulns": []}, {"name": "magic-filter", "version": "1.0.12", "vulns": []}, {"name": "multidict", "version": "6.7.0", "vulns": []}, {"name": "yarl", "version": "1.22.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "attrs", "version": "25.4.0", "vulns": []}, {"name": "certifi", "version": "2025.10.5", "vulns": []}, {"name": "click", "version": "8.3.0", "vulns": []}, {"name": "frozenlist", "version": "1.8.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "idna", "version": "3.11", "vulns": []}, {"name": "propcache", "version": "0.4.1", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "typing-inspection", "version": "0.4.2", "vulns": []}, {"name": "tzlocal", "version": "5.3.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}], "fixes": []}
