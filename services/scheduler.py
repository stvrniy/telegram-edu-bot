from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import logging
from config.settings import settings
from database.models import get_events_for_date, get_users_for_group

logger = logging.getLogger(__name__)

class SchedulerService:
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
    
    def start(self):
        self.scheduler.add_job(
            self.check_events,
            trigger="interval",
            minutes=1,
            next_run_time=datetime.now()
        )
        self.scheduler.start()
        logger.info("Scheduler started")
    
    async def check_events(self):
        now = datetime.now()
        target_time = now.strftime("%H:%M")
        date_str = now.date().isoformat()
        events = get_events_for_date(date_str)
        
        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"[Scheduler] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ {now}. –®—É–∫–∞—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ {date_str} –æ {target_time}")
        
        if not events:
            logger.info(f"[Scheduler] –ü–æ–¥—ñ–π –Ω–∞ {date_str} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        for event in events:
            logger.info(f"[Scheduler] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–¥—ñ—é: {event}")
            
            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –∑–≥—ñ–¥–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:
            # event[0] - id, event[1] - date, event[2] - time, event[3] - title, 
            # event[4] - room, event[5] - group_name
            if event[2] == target_time:  # event[2] - —á–∞—Å –ø–æ–¥—ñ—ó
                group_name = event[5]    # event[5] - –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏
                logger.info(f"[Scheduler] –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–æ–¥—ñ—é –¥–ª—è –≥—Ä—É–ø–∏ {group_name}")
                
                users = get_users_for_group(group_name)
                logger.info(f"[Scheduler] –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏ {group_name}")
                
                if not users:
                    logger.info(f"[Scheduler] –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≥—Ä—É–ø—ñ {group_name} –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
                    continue
                    
                for user in users:
                    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –∑–≥—ñ–¥–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:
                    # user[0] - user_id, user[1] - group_name, user[2] - full_name,
                    # user[3] - is_admin, user[4] - notifications_enabled
                    logger.info(f"[Scheduler] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user[0]}, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {user[4] == 1}")
                    if user[4] == 1:  # notifications_enabled = 1 (—ñ–Ω–¥–µ–∫—Å 4, –∞ –Ω–µ 3)
                        try:
                            await self.bot.send_message(
                                user[0],  # user_id
                                f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {event[3]} –æ {event[2]}\n"
                                f"üìÖ –î–∞—Ç–∞: {event[1]}\n"
                                f"üè´ –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {event[4]}\n"
                                f"üë• –ì—Ä—É–ø–∞: {event[5]}"
                            )
                            logger.info(f"[Scheduler] –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user[0]}")
                        except Exception as e:
                            logger.error(f"[Scheduler] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user[0]}: {e}")
            else:
                logger.info(f"[Scheduler] –ß–∞—Å –Ω–µ —Å–ø—ñ–≤–ø–∞–≤: {event[2]} != {target_time}")