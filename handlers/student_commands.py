from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from config.settings import settings
from database.models import add_user, get_user, update_user_group, get_events, toggle_notifications, update_user_name
from datetime import date, datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class UserStates(StatesGroup):
    waiting_for_name = State()

@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    add_user(user_id, is_admin=1 if user_id in settings.ADMIN_IDS else 0)
    
    welcome_text = (
        f"üëã –í—ñ—Ç–∞—é, {username}!\n\n"
        "üìö –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
        "üè´ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É:\n"
        "`/setgroup <–Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏>`\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `/setgroup –ö–°-21`\n\n"
        "üë§ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è:\n"
        "`/setname <–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ>`\n\n"
        "üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n"
        "`/today`\n\n"
        "üìã –ü–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥:\n"
        "`/schedule`\n\n"
        "üîî –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏:\n"
        "`/notifications`\n\n"
        "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞:\n"
        "`/help`\n"
        "`/commands` - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥"
    )
    
    if user_id in settings.ADMIN_IDS:
        welcome_text += "\n\nüë®‚Äçüíº *–í–∏ —Ç–∞–∫–æ–∂ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!*\n"
        welcome_text += "–î–æ—Å—Ç—É–ø–Ω—ñ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏: `/admin_help` –∞–±–æ `/admin_commands`"
    
    await message.answer(welcome_text, parse_mode="Markdown")

@router.message(Command("help"))
@router.message(Command("commands"))
async def help_command(message: Message):
    user_id = message.from_user.id
    is_admin = user_id in settings.ADMIN_IDS
    
    help_text = (
        "üìö *–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞:*\n\n"
        "üè´ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≥—Ä—É–ø—É:\n"
        "`/setgroup <–Ω–∞–∑–≤–∞_–≥—Ä—É–ø–∏>`\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `/setgroup –ö–°-21`\n\n"
        "üë§ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è:\n"
        "`/setname <–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ>`\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `/setname –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤`\n\n"
        "üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n"
        "`/today` - –ø–æ–∫–∞–∑—É—î –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n\n"
        "üìã –ü–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥:\n"
        "`/schedule` - –ø–æ–∫–∞–∑—É—î –≤–µ—Å—å —Ä–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø–∏\n\n"
        "üîî –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏:\n"
        "`/notifications` - —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å\n\n"
        "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞:\n"
        "`/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "`/commands` - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏:\n"
        "`/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    )
    
    if is_admin:
        help_text += "\n\nüë®‚Äçüíº *–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:*\n"
        help_text += "`/admin_help` - –¥–æ–≤—ñ–¥–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "`/admin_commands` - —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥"
    
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("setname"))
async def set_name_command(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ!\n"
                           "–ü—Ä–∏–∫–ª–∞–¥: `/setname –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤`", parse_mode="Markdown")
        return
    
    full_name = args[1].strip()
    
    if len(full_name) < 3:
        await message.answer("‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ!")
        return
    
    update_user_name(message.from_user.id, full_name)
    await message.answer(f"‚úÖ –Ü–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{full_name}*", parse_mode="Markdown")

@router.message(Command("setgroup"))
async def set_group_command(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏!\n"
                           "–ü—Ä–∏–∫–ª–∞–¥: `/setgroup –ö–°-21`", parse_mode="Markdown")
        return
    
    group_name = args[1].strip()
    
    if len(group_name) > 20:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞! –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤")
        return
    
    update_user_group(user_id, group_name)
    await message.answer(f"‚úÖ –ì—Ä—É–ø—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{group_name}*", parse_mode="Markdown")

@router.message(Command("schedule"))
async def schedule_command(message: Message):
    user = get_user(message.from_user.id)
    
    if not user or not user[1]:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É –∫–æ–º–∞–Ω–¥–æ—é `/setgroup`", parse_mode="Markdown")
        return
    
    group_name = user[1]
    events = get_events(group_name)
    
    if not events:
        await message.answer(f"üì≠ –î–ª—è –≥—Ä—É–ø–∏ *{group_name}* –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π", parse_mode="Markdown")
        return
    
    response = f"üìã *–†–æ–∑–∫–ª–∞–¥ –¥–ª—è {group_name}:*\n\n"
    
    current_date = None
    for event in events:
        if event[1] != current_date:
            current_date = event[1]
            response += f"\nüìÖ *{current_date}:*\n"
        response += f"‚è∞ {event[2]}: {event[3]} (–∞—É–¥. {event[4]})\n"
    
    await message.answer(response, parse_mode="Markdown")

@router.message(Command("today"))
async def today_command(message: Message):
    user = get_user(message.from_user.id)
    
    if not user or not user[1]:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≥—Ä—É–ø—É –∫–æ–º–∞–Ω–¥–æ—é `/setgroup`", parse_mode="Markdown")
        return
    
    group_name = user[1]
    today = date.today().isoformat()
    events = get_events(group_name, today)
    
    if not events:
        await message.answer(f"üì≠ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è *{group_name}* –Ω–µ–º–∞—î –ø–æ–¥—ñ–π", parse_mode="Markdown")
        return
    
    response = f"üìÖ *–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è {group_name}:*\n\n"
    
    for event in events:
        response += f"‚è∞ {event[2]}: {event[3]} (–∞—É–¥. {event[4]})\n"
    
    await message.answer(response, parse_mode="Markdown")

@router.message(Command("notifications"))
async def notifications_command(message: Message):
    user = get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é `/start`")
        return
    
    current_status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if user[3] == 1 else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    new_status = not user[3]
    
    toggle_notifications(message.from_user.id, new_status)
    
    status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_status else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    await message.answer(f"üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status_text}!")