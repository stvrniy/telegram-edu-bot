from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.settings import settings
from database.models import get_users_by_name, add_event, get_events, edit_event, delete_event, get_all_events, get_users_for_group
from datetime import datetime
from functools import wraps

router = Router()

class NotifyGroupStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_message = State()

def admin_only(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in settings.ADMIN_IDS:
            await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        return await func(message, *args, **kwargs)
    return wrapper

@router.message(Command("admin_help"))
@router.message(Command("admin_commands"))
@admin_only
async def admin_help_command(message: Message):
    help_text = (
        "üë®‚Äçüíº *–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥:*\n\n"
        "üì§ –†–æ–±–æ—Ç–∞ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º:\n"
        "`/upload_schedule` - –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑ PDF —Ñ–∞–π–ª—É üöß\n"
        "`/add_event <–¥–∞—Ç–∞> <—á–∞—Å> <–Ω–∞–∑–≤–∞> <–∞—É–¥–∏—Ç–æ—Ä—ñ—è> <–≥—Ä—É–ø–∞>` - –¥–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é\n"
        "`/edit_event <id> <–¥–∞—Ç–∞> <—á–∞—Å> <–Ω–∞–∑–≤–∞> <–∞—É–¥–∏—Ç–æ—Ä—ñ—è> <–≥—Ä—É–ø–∞>` - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é\n"
        "`/delete_event <id>` - –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥—ñ—é\n"
        "`/all_events` - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó\n\n"
        "üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"
        "`/notify_group` - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–π –≥—Ä—É–ø—ñ\n"
        "`/notify_student` - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É\n"
        "`/list_students` - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "`/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞:\n"
        "`/admin_help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "`/admin_commands` - —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥\n\n"
        "üë• –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω—ñ:\n"
        "`/help` - –¥–æ–≤—ñ–¥–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤\n\n"
        "üöß - —Ñ—É–Ω–∫—Ü—ñ—è –ø–ª–∞–Ω—É—î—Ç—å—Å—è –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"
    )
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("notify_group"))
@admin_only
async def notify_group_command(message: Message, state: FSMContext):
    await message.answer("üë• –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    await state.set_state(NotifyGroupStates.waiting_for_group)

@router.message(NotifyGroupStates.waiting_for_group)
async def process_notify_group(message: Message, state: FSMContext):
    group_name = message.text.strip()
    await state.update_data(group_name=group_name)
    await message.answer("üí¨ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏:")
    await state.set_state(NotifyGroupStates.waiting_for_message)

@router.message(NotifyGroupStates.waiting_for_message)
async def process_group_message(message: Message, state: FSMContext):
    data = await state.get_data()
    group_name = data.get('group_name')
    text = message.text
    
    users = get_users_for_group(group_name)
    
    if not users:
        await message.answer(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group_name}")
        await state.clear()
        return
    
    sent_count = 0
    for user in users:
        try:
            await message.bot.send_message(
                user[0],  # user_id
                f"üì¢ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏ {group_name}:*\n\n{text}",
                parse_mode="Markdown"
            )
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user[0]}: {e}")
    
    await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–∏ {group_name}")
    await state.clear()

@router.message(Command("notify_student"))
@admin_only
async def notify_student_command(message: Message):
    """
    –§–æ—Ä–º–∞—Ç: /notify_student –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–§–æ—Ä–º–∞—Ç: `/notify_student –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è`\n"
            "–ü—Ä–∏–∫–ª–∞–¥: `/notify_student –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤ –ü—Ä–∏–π–¥–∏ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –ø–∞—Ä—É`",
            parse_mode="Markdown"
        )
        return

    full_name, text = args[1], args[2]

    # —à—É–∫–∞—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —ñ–º–µ–Ω—ñ
    students = get_users_by_name(full_name)
    if not students:
        await message.answer(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç–∞ '{full_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    sent_count = 0
    for student in students:
        try:
            await message.bot.send_message(
                student[0],  # user_id
                f"üì¢ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{text}",
                parse_mode="Markdown"
            )
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥om–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É {student[0]}: {e}")

    await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º")

@router.message(Command("list_students"))
@admin_only
async def list_students_command(message: Message):
    from database.models import get_db_connection
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users ORDER BY group_name, full_name')
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        await message.answer("üì≠ –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
        return
    
    response = "üë• *–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:*\n\n"
    
    current_group = None
    for user in users:
        if user[1] != current_group:  # user[1] - group_name
            current_group = user[1]
            response += f"\nüè´ *–ì—Ä—É–ø–∞ {current_group if current_group else '–ë–µ–∑ –≥—Ä—É–ø–∏'}:*\n"
        
        response += f"üë§ {user[2] if user[2] else '–ë–µ–∑ —ñ–º–µ–Ω—ñ'} (ID: {user[0]})\n"
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part, parse_mode="Markdown")
    else:
        await message.answer(response, parse_mode="Markdown")

@router.message(Command("stats"))
@admin_only
async def stats_command(message: Message):
    from database.models import get_db_connection
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE is_admin = 1')
    admin_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE notifications_enabled = 1')
    notifications_enabled = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(DISTINCT group_name) FROM users WHERE group_name IS NOT NULL')
    groups_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM events')
    events_count = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        f"üë• –ó–∞–≥–∞–ª–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *{total_users}*\n"
        f"üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: *{admin_users}*\n"
        f"üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ: *{notifications_enabled}*\n"
        f"üè´ –ì—Ä—É–ø: *{groups_count}*\n"
        f"üìÖ –ü–æ–¥—ñ–π —É —Ä–æ–∑–∫–ª–∞–¥—ñ: *{events_count}*"
    )
    
    await message.answer(stats_text, parse_mode="Markdown")

@router.message(Command("add_event"))
@admin_only
async def add_event_command(message: Message):
    args = message.text.split(maxsplit=5)
    if len(args) < 6:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n"
                           "–§–æ—Ä–º–∞—Ç: `/add_event <–¥–∞—Ç–∞> <—á–∞—Å> <–Ω–∞–∑–≤–∞> <–∞—É–¥–∏—Ç–æ—Ä—ñ—è> <–≥—Ä—É–ø–∞>`\n"
                           "–ü—Ä–∏–∫–ª–∞–¥: `/add_event 2025-09-16 10:00 –ê–ª–≥–µ–±—Ä–∞ 301 –ö–°-21`", 
                           parse_mode="Markdown")
        return
    
    date, time, title, room, group_name = args[1:6]
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏
    try:
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD")
        return
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∞—Å—É
    try:
        datetime.strptime(time, "%H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM")
        return
    
    add_event(date, time, title, room, group_name)
    await message.answer(f"‚úÖ –ü–æ–¥—ñ—é –¥–æ–¥–∞–Ω–æ:\n"
                       f"üìù {title}\n"
                       f"‚è∞ {time} {date}\n"
                       f"üë• {group_name}\n"
                       f"üè´ –ê—É–¥. {room}")

@router.message(Command("edit_event"))
@admin_only
async def edit_event_command(message: Message):
    args = message.text.split(maxsplit=6)
    if len(args) < 7:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n"
                           "–§–æ—Ä–º–∞—Ç: `/edit_event <id> <–¥–∞—Ç–∞> <—á–∞—Å> <–Ω–∞–∑–≤–∞> <–∞—É–¥–∏—Ç–æ—Ä—ñ—è> <–≥—Ä—É–ø–∞>`",
                           parse_mode="Markdown")
        return
    
    event_id, date, time, title, room, group_name = args[1:7]
    
    try:
        event_id = int(event_id)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–¥—ñ—ó –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return
    
    edit_event(event_id, date, time, title, room, group_name)
    await message.answer(f"‚úÖ –ü–æ–¥—ñ—é #{event_id} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ")

@router.message(Command("delete_event"))
@admin_only
async def delete_event_command(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!\n–§–æ—Ä–º–∞—Ç: `/delete_event <id>`", parse_mode="Markdown")
        return
    
    event_id = args[1]
    
    try:
        event_id = int(event_id)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–¥—ñ—ó –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
        return
    
    if delete_event(event_id):
        await message.answer(f"‚úÖ –ü–æ–¥—ñ—é #{event_id} –≤–∏–¥–∞–ª–µ–Ω–æ")
    else:
        await message.answer(f"‚ùå –ü–æ–¥—ñ—é #{event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@router.message(Command("all_events"))
@admin_only
async def all_events_command(message: Message):
    events = get_all_events()
    
    if not events:
        await message.answer("üì≠ –ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ø–æ–¥—ñ—ó")
        return
    
    response = "üìã *–í—Å—ñ –ø–æ–¥—ñ—ó:*\n\n"
    for event in events:
        response += f"#{event[0]} {event[1]} {event[2]}: {event[3]} (–∞—É–¥. {event[4]}) –¥–ª—è {event[5]}\n"
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part, parse_mode="Markdown")
    else:
        await message.answer(response, parse_mode="Markdown")